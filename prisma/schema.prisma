// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ObjectType {
  Playlist
  Track
  Album
  Artist
  Genre
  Year
}

enum ObjectSource {
  Spotify
  AppleMusic
  Discogs
  YouTubeMusic
  YouTube
  Original
}

model ObjectCommentary {
  id         String   @id @default(uuid()) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  label  String?
  text   String?
  rating Int?

  objectRecord   ObjectRecord @relation(fields: [objectRecordId], references: [id])
  objectRecordId String       @db.Uuid
}

model ObjectRecord {
  id         String   @id @default(uuid()) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  authorId String

  objectType     ObjectType
  objectSource   ObjectSource
  objectSourceId String

  collection   ObjectCollection @relation(fields: [collectionId], references: [id])
  collectionId String           @db.Uuid

  commentaries ObjectCommentary[]
}

model ObjectCollection {
  id         String   @id @default(uuid()) @db.Uuid
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt

  name        String
  description String

  authorId String

  objectType ObjectType

  objectSource   ObjectSource
  objectSourceId String?

  members ObjectRecord[] @relation()

  @@index(objectSourceId)
}

// identity

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
